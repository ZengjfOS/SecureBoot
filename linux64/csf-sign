#!/bin/bash

[ -z `which awk 2>&1 | grep bin` ] &&  sudo apt-get install gawk

# A POSIX variable
OPTIND=1         # Reset in case getopts has been used previously in the shell.

# Initialize our own variables:
uboot_csf_file=csf-uboot                # csf file for u-boot
uboot_file=u-boot.imx                   # default u-boot file
uboot_file_name="${uboot_file%%.*}"     # default u-boot file name

zImage_csf_file=csf-zImage              # csf file for zImage
zImage_file=zImage                      # default kernel file
zImage_load_addr=0x12000000

csf_generate=0                          # csf generate flag
generate_cmd=u                           # default generate command

showHelp()
{
    cat << EOF
USAGE:
  -u specify u-boot file
  -u specify zImage file
  -g generate file
    c padding 0 with csf-uboot.bin file size to u-boot sign part
    r remove generate all file
    d dump u-boot ivt info
    z sign zImage
    mu sign MfgTool u-boot
    nu sign normal u-boot 
Example:
  csf-sign -g d (defalut u-boot file:u-boot.imx)
  csf-sign -g c (defalut u-boot file:u-boot.imx)
  csf-sign -g mu (defalut csf file: csf-uboot)
  csf-sign -g nu (defalut csf file: csf-uboot)
  csf-sign -g z (defalut csf file: csf-zImage)
  csf-sign -g r (defalut csf file: csf-zImage)
EOF
}

exitProgram()
{
    echo "success."
    exit 0
}

while getopts "h?cdg:u:s:" opt; do
    case "$opt" in
    h|\?)
        showHelp
        exit 0
        ;;
    u)  uboot_file=$OPTARG
        uboot_file_name="${uboot_file%%.*}"
        ;;
    z)  zImage_file=$OPTARG
        ;;
    g)  csf_generate=1
        generate_cmd=$OPTARG
        ;;
    esac
done

shift $((OPTIND-1))

[ "${1:-}" = "--" ] && shift

genCleanUboot()
{
    if [ ! -e "${uboot_file}" ]; then
        echo "please ${uboot_file} exsit"
        exit 1
    fi
    
    
    if [ ! -e "${uboot_csf_file}.bin" ]; then
        echo "please ${uboot_csf_file}.bin exsit"
        exit 1
    fi

    output_file="${uboot_file_name}_erase.imx"
    csf_binSize=`find * -iname ${uboot_csf_file}.bin | xargs ls -al | awk '{print $5}'`
    
    [ -e ${output_file} ] && rm -v ${output_file}
    cat ${uboot_file} >> ${output_file}
    dd if=/dev/zero bs=1 count=${csf_binSize} >> ${output_file}

    cat << EOF

------------------------
uboot file: '${uboot_file}', 
file name: '${uboot_file_name}' 
output file: '${output_file}' 
CSF bin file Size: ${csf_binSize}
EOF
}

dumpIVT()
{
    ivt_info=`od -X -N 0x20 ${uboot_file}`

    cat << EOF

${ivt_info}
IVT address: `echo ${ivt_info} | awk '{printf("0x%X", strtonum("0x"$8))}'`
`echo ${ivt_info} | awk '{len=(strtonum("0x"$9)-strtonum("0x"$8))} END {printf("Image length: 0x%X", len)}'`
EOF
}

removeAll()
{
    rm -rf \
csf-uboot.bin \
csf-zImage.bin \
dcd_addr.bin \
ivt.bin \
u-boot_erase.imx \
u-boot-pad.bin \
u-boot-signed.imx \
zImage_pad.bin \
zImage_pad_ivt.bin \
zImage_signed.bin \
${uboot_csf_file} \
${zImage_csf_file} \
genIVT

}

# DCD address must be cleared for signature, as mfgtool will clear it.
clear_dcd_addr()
{
    # store the DCD address
    dd if=$1 of=dcd_addr.bin bs=1 count=4 skip=12
    # generate a NULL address for the DCD
    dd if=/dev/zero of=zero.bin bs=1 count=4
    # replace the DCD address with the NULL address
    dd if=zero.bin of=$1 seek=12 bs=1 conv=notrunc
}
# DCD address must be set for mfgtool to localize the DCD table.
set_dcd_addr()
{
    # restore the DCD address with the original address
    dd if=dcd_addr.bin of=$1 seek=12 bs=1 conv=notrunc
    rm zero.bin
}

signUboot()
{

    if [ ! -e "${uboot_file}" ]; then
        echo "please ${uboot_file} exsit"
        exit 1
    fi

    [ -e "${uboot_csf_file}" ] && rm -v ${uboot_csf_file}
    cp -v "templates/${uboot_csf_file}.tpl" "${uboot_csf_file}"

    ivt_info=`od -X -N 0x20 ${uboot_file}`
    ivt_address=`echo ${ivt_info} | awk '{printf("0x%X", strtonum("0x"$8))}'`
    ivt_image_length=`echo ${ivt_info} | awk '{len=(strtonum("0x"$9)-strtonum("0x"$8))} END {printf("0x%X", len)}'`
    dcd_length_H=`od -x -j 0x2d -N 1 u-boot.imx | awk '{print $2}'`
    dcd_length_L=`od -x -j 0x2e -N 1 u-boot.imx | awk '{print $2}'`

    if [ "$1" == "MfgTool" ]; then
        clear_dcd_addr u-boot.imx
        cat >> ${uboot_csf_file} << EOF
Blocks = 0x00910000 0x0000002c 0x0000${dcd_length_H:2:2}${dcd_length_L:2:2} "u-boot.imx",\\
    ${ivt_address} 0x00000000 ${ivt_image_length} "u-boot.imx"
EOF
    else
        cat >> ${uboot_csf_file} << EOF
Blocks = ${ivt_address} 0x00000000 ${ivt_image_length} "u-boot.imx"
EOF
    fi

    csf_output_file="${uboot_csf_file}.bin"
    [ -e ${csf_output_file} ] && rm -v ${csf_output_file}
    csf_bin_info=`./bin/cst -o ${csf_output_file} -i ${uboot_csf_file} || exit 1`

    if [ "$1" == "MfgTool" ]; then
        set_dcd_addr u-boot.imx
    fi

    output_file="${uboot_file_name}-signed.imx"
    [ -e ${output_file} ] && rm -v ${output_file}
    cat ${uboot_file} ${csf_output_file} > ${output_file}

    cat << EOF

------------------------
u-boot type: $1
csf file name: ${uboot_csf_file}
csf output file name: ${csf_output_file}
uboot file: ${uboot_file}
uboot file name: ${uboot_file_name}
csf sign info: ${csf_bin_info}
uboot output file: ${output_file}
EOF
}

signzImage()
{
    zImage_file_size=`find -iname ${zImage_file} | grep "^./${zImage_file}$" | xargs ls -al | awk '{ printf("0x%X", $5) }'`
    zImage_file_appended_size=`find -iname ${zImage_file} | grep "^./${zImage_file}$" | xargs ls -al | awk '{ if (($5 / strtonum("0x1000")) == 0) { printf("0x%X", $5); } else { printf("0x%X000", ($5 + 0x1000) / 0x1000);}}'`

    objcopy -I binary -O binary --pad-to ${zImage_file_appended_size} --gap-fill=0x00 ${zImage_file} ${zImage_file}_pad.bin

    [ -e "${zImage_csf_file}" ] && rm -v ${zImage_csf_file}
    cp -v "templates/${zImage_csf_file}.tpl" "${zImage_csf_file}"
    cat >> ${zImage_csf_file} << EOF
Blocks = ${zImage_load_addr} 0x0 `printf "0x%X" $((${zImage_file_appended_size} + 0x20))` "zImage_pad_ivt.bin"
EOF

    # zengjf@/zengjf:~/zengjf/cst-3.0.1/linux64$ od -X -N 0x20 ivt.bin
    # 0000000 412000d1 80800000 00000000 00000000
    # 0000020 00000000 80eea000 80eea020 00000000
    # 0000040
    [ -e "genIVT" ] && rm -v genIVT
    cat >> genIVT << EOF
#! /usr/bin/perl -w
use strict;
open(my \$out, '>:raw', 'ivt.bin') or die "Unable to open: \$!";
print \$out pack("V", 0x412000D1); # Signature
print \$out pack("V", ${zImage_load_addr}); # Load Address
print \$out pack("V", 0x0); # Reserved
print \$out pack("V", 0x0); # DCD pointer
print \$out pack("V", 0x0); # Boot Data
print \$out pack("V", `printf "0x%X" $((${zImage_load_addr} + ${zImage_file_appended_size}))`); # Self Pointer *ivt
print \$out pack("V", `printf "0x%X" $((${zImage_load_addr} + ${zImage_file_appended_size} + 0x20))`); # CSF Pointer *csf
print \$out pack("V", 0x0); # Reserved
close(\$out);
EOF
    perl ./genIVT
    cat ${zImage_file}_pad.bin ivt.bin > ${zImage_file}_pad_ivt.bin

    csf_output_file="${zImage_csf_file}.bin"
    [ -e ${csf_output_file} ] && rm -v ${csf_output_file}
    csf_bin_info=`./bin/cst -o ${csf_output_file} -i ${zImage_csf_file} || exit 1`
    
    [ -e ${zImage_file}_signed.bin ] && rm -v ${zImage_file}_signed.bin
    cat ${zImage_file}_pad_ivt.bin ${csf_output_file} > ${zImage_file}_signed.bin

    cat << EOF

------------------------
zImage file size: ${zImage_file_size}
zImage file appended size: ${zImage_file_appended_size}
zImage padding file name: ${zImage_file}_pad.bin
zImage padded ivt file name: ${zImage_file}_pad_ivt.bin
csf file name: ${zImage_csf_file}
csf output file name: ${csf_output_file}
csf sign info: ${csf_bin_info}
zImage output file: ${zImage_file}_signed.bin
EOF
}

if [ ${csf_generate} -eq 1 ]; then

    case "$generate_cmd" in
    c)  genCleanUboot
        ;;
    d)  dumpIVT
        ;;
    r)  removeAll
        ;;
    "mu")  signUboot MfgTool
        ;;
    "nu")  signUboot Normal
        ;;
    "z")  signzImage
        ;;
    esac

    exitProgram
fi

showHelp
